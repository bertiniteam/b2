beginning documentation for Vector class for Bertini2.


@startuml
namespace bertini{
class Vector {
The Bertini class for vectors holding amp numbers, rational numbers (?) and functions (?).
..
Will hold different class objects, both numbers and functions. Will be a template class with specializations (?).
==
data members
--
-std::unique_ptr<T> array_;
-unsigned int vsize_;
-unsigned int maxsize_;
==
setters
--
?needed?what should be?
==
getters
--
+unsigned int size() const;//<get current size
+T at(int i) const;//<get current value at i-th position
?any other needed?
==
operators
--
+Vector operator = (const Vector& right); // the assignment operator
+Vector operator += (const T& right); // append element
+Vector operator += (const Vector& right); // append Vector
?other needed?
==
operators (possible friend operators)
//< most of this will probably work through reference to the specific element class correspondent operator
..
+friend ostream & operator << (ostream & out, Vector & vec);
..
+friend Vector operator +(const Vector & left, const Vector & right);
..
+friend Vector operator -(const Vector & left, const Vector & right);
..
+friend Vector operator *(const Vector & left, const T & right);//<scalar multiplication
..
+friend Vector operator *(const Vector & left, const Vector & right);//<point by point multiplication
..
+friend T operator *(const Vector & left, const Vector & right);//<inner product
..
+friend Matrix operator *(const Vector & left, const Vector & right);//<outer product
..
+friend Vector operator /(const Vector & left, const T & right);//<scalar division
..
+friend Vector operator /(const Matrix & left, const Vector & right);//<linear solver "Matlab" like x=W\b
..
+friend  operator % ;\\<not sure about how this operator works for amp either
==
methods
--
+T l2norm();//<l2 norm (squared)
+T l2norm_sqrt();//<l2 norm
+T l1norm();//<l1 norm
+T linfnorm();//<l_infinity norm
+Vector<Complex> conj();//<Complex conjugate
?others?
==
mpi methods
//<should work on Vector level or on element level??
//<ask about specifics
--
int Send(unsigned int target)
..
int Receive(unsigned int source)
..
int Send(unsigned int target, communicator comm)
..
int Receive(unsigned int source, communicator comm)
..
int BcastSend()
..
int BcastSend(communicator)
..
int	BcastReceive(source)
..
int	BcastReceive(source, communicator)
==
serialization
//<need to ask
--
see << >> operators
use Boost.Serialization for archiving
}
}
@enduml



