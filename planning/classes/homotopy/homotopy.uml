http://plantuml.sourceforge.net/activity2.html





@startuml


namespace bertini{

Homotopy <|-- ImplicitTimeHomotopy
Homotopy <|-- ExplicitTimeHomotopy


class Homotopy{

+Construct()
+Run()
..
-Track(segment, startpts)
the main internal method.
this is called for each startpt and each segment
..
-Step()
-AdvanceTime() - virtual
overloaded for subclasses
-AdvanceVariables()  common
-AdvanceParameters() - virtual
  overloaded for subclasses
-StepLengthAdjustment()
  overloaded for subclasses
..
-Endgame()
  does this belong here?
..
-FindPath() virtual
 overloaded for subclasses
 compute the segments to be tracked in terms of t
==

- CompleteSystem[] (z,p)
- ParameterTimeRelationship[]

}



class ImplicitTimeHomotopy{
+AdvanceTime() virtual
+AdvanceParameters() virtual
==

- system f(z,p)
- parameter_time_relationship[]
   g(p) = g(p(t)) = 0
- generic linear projection pi(p) = t

--
given implicit system
f(z,p) and g(p)
with p = a start parameter
and p = b end parameter
1) build explicit ab-initio system,
2) solve to get solutions to f(z,a)
then ready to run() homotopy
}



class ExplicitTimeHomotopy{
+AdvanceTime() virtual
+AdvanceParameters() virtual
+FindPath() virtual
	returns {1,0}
==

- System f(z,p)
- ParameterTimeRelationship[] g(p) = g(p(t)) = 0

--
time explicitly appears.

--
given only target system, create explit-time homotopy,
start system, and start points
then ready to run() homotopy
--
given full homotopy f(z,t), but no start points
no solutions to t = t_start,
ab-initio solve for f(z,t_start)
then ready to run() homotopy
--
given full homotopy f(z,t), with solutions at t_start
ready to run() homotopy

}



}


@enduml



















