










@startuml
namespace bertini{

class Number {

The Bertini class for holding Adaptive Multiple Precision numbers.
..
Will hold multiple precision and double type numbers, and have methods
for switching between the two, as well as changing the precision of the MP Number.
==
data members
--
-std::unique_ptr<double> number_as_double_;
-std::unique_ptr<boost::multiprecision::something> number_as_multiple_precision_;
	options for 'something', from Boost.Multiprecision:
			float128
			cpp_bin_float (2x slower, no dependency)
			cpp_dec_float (2x slower, no dependency)
			mpfr_float (rounding, throws if cannot convert from string),
			gmp_float (division by 0 results in thrown exception, round tripping not possible)
-unsigned int number_of_bits_;


==
setters
--
+void SetPrecision(unsigned int num_bits)
sets the precision in terms of the number of bits desired.
switches between number types internally based on the desired precision.
if going from high to low, then allocate the double type, copy the value, and clear the mpfr type.
if going from low to high, then allocate the mpfr type to desired precision, copy the value, and clear the double.
..


==
getters
--
+unsigned int NumberOfBits() const; ///< get the current working precision in bits.  this is exact
+unsigned int NumberOfDigits() const; ///< get the current working precision in digits.  this is approximate only

==
operators
--
+Number operator = (const Number& right); // the assignment operator

==
friend operators
..
+friend ostream & operator << (ostream & out, Number & n);
..
+friend Number operator +(const Number & left, const Number & right);
..
+friend Number operator -(const Number & left, const Number & right);
..
+friend Number operator *(const Number & left, const Number & right);
..
+friend Number operator /(const Number & left, const Number & right);
..
+friend Number operator %(const Number & left, const Number & right);


==
mpi methods
--
int Send(unsigned int target)
..
int Receive(unsigned int source)
..
int Send(unsigned int target, communicator comm)
..
int Receive(unsigned int source, communicator comm)
..
int BcastSend()
..
int BcastSend(communicator)
..
int BcastReceive(source)
..
int BcastReceive(source, communicator)


==
serialization
--
see << >> operators
use Boost.Serialization for archiving
}
}
@enduml







