@startuml

namespace bertini{
	
	Node <|-- BinaryOperator
	Node <|-- UnaryOperator
	Node <|-- MAryOperator
	Node <|-- Symbol
	BinaryOperator <|-- Plus
	BinaryOperator <|-- Minus
	UnaryOperator <|-- Negate
	BinaryOperator <|-- Times
	BinaryOperator <|-- Divide
	UnaryOperator <|-- Exp
	UnaryOperator <|-- Log
	UnaryOperator <|-- Sine
	UnaryOperator <|-- Cosine
	MAryOperator <|-- UserDefined
	
	Symbol <|-- Variable
	Symbol <|-- PathPariable
	Symbol <|-- Coefficient
	
	
	Function o-- Node 
	
	class Node {
		disallow empty instantiation?  
		this might be acheieved by pure virtualism
		--
            	virtual SetPrecision(int prec)
            	..
            	virtual Evaluate()
            	..
            	virtual String()
            	
            	--
            	
            	-Node()  private so that empty construction prohibited.  
            	this may help protect against errors in parsing
	}
	
	class BinaryOperator {
		-Node* leftnode_
		-Node* rightnode_
		--
		virtual Evaluate()
	}
	
	class UnaryOperator {
		-Node* node_
		--
		virtual Evaluate()
	}
	
	class MAryOperator {
		-std::vector<Node*> nodes_
		--
		virtual Evaluate()
	}

	
	
	class Variable {
		..
		Evaluate() virtual
		return current value
		..
		String() virtual
		return name_
	}
	
	
	class Plus {
		+Plus(Node, Node)
		..
		String()
	}
	
	class Minus {
		+Minus(Node,Node)
		..
	}
	
	class Negate {
		+Negate(Node)
		..
	}
	
	class Times {
		+Times(Node,Node)
		..
	}
	
	
	class Divide {
		+Divide(Node, Node)
	}
	
	class Function {
		*Node  top of the tree
	}
	
	class Symbol {
		empty virtual class
	}
}

@enduml