@startuml
title Function Class and Nodes





	Function o-- Node
	
	Node <|-- BinaryOperator
	Node <|-- UnaryOperator
	Node <|-- M_aryOperator
	Node <|-- Symbol
	
	BinaryOperator <|-- Plus
	BinaryOperator <|-- Minus
	BinaryOperator <|-- Times
	BinaryOperator <|-- Divide
	UnaryOperator <|-- Negate
	UnaryOperator <|-- Exp
	UnaryOperator <|-- Log
	UnaryOperator <|-- Sine
	UnaryOperator <|-- Cosine
	M_aryOperator <|-- UserDefined
	
	Symbol <|-- Variable
	Symbol <|-- PathVariable
	Symbol <|-- Coefficient
	
	 
	 
	 
	
	interface Node {
		disallow empty instantiation?  
		this might be achieved by pure virtualism
		--public--
            	+{abstract} virtual SetPrecision(int prec)
            	+{abstract} virtual Evaluate() //Returns Symbol?
            	+{abstract} virtual String()
        --private--      	
            	-Node()  private so that empty construction prohibited.  
            	this may help protect against errors in parsing
	}
	
	
	
	
	
	interface BinaryOperator {
		--private--
		-Node* leftnode_
		-Node* rightnode_
	}
	
	interface UnaryOperator {
		--private--
		-Node* node_
	}
	
	interface M_aryOperator {
		--private--
		-std::vector<Node*> nodes_
	}
	interface Symbol {
	why do we need this?
	}

	
	
	
	
	
	
	class Plus {
		
	}
	
	class Minus {
		
	}
	
	class Negate {
		
	}
	
	class Times {
		
	}
	
	
	class Divide {
		
	}





	
	
	class Variable {
	}
	
	
	
	class Function {
		*Node  top of the tree
	}
	


@enduml